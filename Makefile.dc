
APP_NAME = last.elf

# compiler

CC = kos-cc
SH_DIRECTORY=/opt/toolchains/dc/sh-elf/bin/

CFLAGS = -DDREAMCAST -DSOUND -DJOYSTICK -DLOW_CPU -Wall -Ofast -flto -m4-single-only -fsingle-precision-constant -ftree-vectorize -fdata-sections -ffunction-sections -fargument-noalias-global -flto -std=c99
LFLAGS = -lSDL -lm -Wl,--as-needed -flto -s

# source files

OBJ =	m_data.o
OBJ +=	demo.o enemies.o engine.o input.o main.o random.o room.o \
	sound.o sprites.o video.o world.o
	

all : $(APP_NAME) scramble

scramble:
	${SH_DIRECTORY}sh-elf-objcopy -R .stack -O binary $(APP_NAME) LAST.BIN

pack:
	rm -f IP.BIN
	sh-elf-objcopy -R .stack -O binary $(APP_NAME) main.bin
	${KOS_BASE}/utils/scramble/scramble main.bin ./cd/1ST_READ.BIN
	makeip ip.txt IP.BIN
	mkisofs -C 0,$(shell lbacalc track1.raw track2.raw) -V LMISSION -G IP.BIN -joliet -rock -l -o "lmission.iso" ./cd
	mds4dc -c lmission.mds lmission.iso track1.raw track2.raw
	
pack_emu:
	rm -f IP.BIN
	sh-elf-objcopy -R .stack -O binary $(APP_NAME) main.bin
	${KOS_BASE}/utils/scramble/scramble main.bin ./cd/1ST_READ.BIN
	makeip ip.txt IP.BIN
	mkisofs -V lmission -G IP.BIN -joliet -rock -l -x cd -o "lmission.iso" ./cd
	cdi4dc lmission.iso lmission.cdi -d


$(APP_NAME) : $(OBJ)
	$(CC) $^ $(LFLAGS) -o $@

%.o : %.c
	$(CC) -c $(CFLAGS) $< -o $@

clean :
	rm -rf ./*.o $(APP_NAME)
